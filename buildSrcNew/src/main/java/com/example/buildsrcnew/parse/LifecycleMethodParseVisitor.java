package com.example.buildsrcnew.parse;


import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.Type;

import static org.objectweb.asm.Opcodes.AALOAD;
import static org.objectweb.asm.Opcodes.AASTORE;
import static org.objectweb.asm.Opcodes.ACC_BRIDGE;
import static org.objectweb.asm.Opcodes.ACC_ENUM;
import static org.objectweb.asm.Opcodes.ACC_FINAL;
import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ACC_STATIC;
import static org.objectweb.asm.Opcodes.ACC_SUPER;
import static org.objectweb.asm.Opcodes.ACC_SYNTHETIC;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.ANEWARRAY;
import static org.objectweb.asm.Opcodes.ARETURN;
import static org.objectweb.asm.Opcodes.ARRAYLENGTH;
import static org.objectweb.asm.Opcodes.ASTORE;
import static org.objectweb.asm.Opcodes.CHECKCAST;
import static org.objectweb.asm.Opcodes.DLOAD;
import static org.objectweb.asm.Opcodes.DSTORE;
import static org.objectweb.asm.Opcodes.DUP;
import static org.objectweb.asm.Opcodes.GETFIELD;
import static org.objectweb.asm.Opcodes.GETSTATIC;
import static org.objectweb.asm.Opcodes.GOTO;
import static org.objectweb.asm.Opcodes.ICONST_0;
import static org.objectweb.asm.Opcodes.ICONST_1;
import static org.objectweb.asm.Opcodes.IFEQ;
import static org.objectweb.asm.Opcodes.IFNONNULL;
import static org.objectweb.asm.Opcodes.IF_ACMPNE;
import static org.objectweb.asm.Opcodes.IF_ICMPGE;
import static org.objectweb.asm.Opcodes.ILOAD;
import static org.objectweb.asm.Opcodes.INVOKEINTERFACE;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKESTATIC;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.ISTORE;
import static org.objectweb.asm.Opcodes.LLOAD;
import static org.objectweb.asm.Opcodes.LSTORE;
import static org.objectweb.asm.Opcodes.NEW;
import static org.objectweb.asm.Opcodes.POP;
import static org.objectweb.asm.Opcodes.RETURN;
import static org.objectweb.asm.Opcodes.V1_7;

public class LifecycleMethodParseVisitor extends MethodVisitor {

    private static final String TAG = LifecycleMethodParseVisitor.class.getSimpleName();

    private String className,methodName;

    public LifecycleMethodParseVisitor(MethodVisitor methodVisitor, String className,String methodName) {
        super(Opcodes.ASM5, methodVisitor);

        this.className = className;
        this.methodName = methodName;

        System.out.println(TAG+"===== LifecycleMethodParseVisitor() className =" + className + ";methodName = " + methodName);

    }

    @Override
    public void visitCode() {

        System.out.println(TAG+"===== c() ======  className = " + className);

        Label l0 = new Label();
        mv.visitLabel(l0);
        mv.visitLineNumber(57, l0);
        mv.visitLdcInsn(className.replace('/', '.'));
        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
        mv.visitVarInsn(ASTORE, 2);
        Label l1 = new Label();
        mv.visitLabel(l1);
        mv.visitLineNumber(59, l1);
        mv.visitVarInsn(ALOAD, 2);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredFields", "()[Ljava/lang/reflect/Field;", false);
        mv.visitVarInsn(ASTORE, 3);
        Label l2 = new Label();
        mv.visitLabel(l2);
        mv.visitLineNumber(60, l2);
        mv.visitVarInsn(ALOAD, 3);
        mv.visitVarInsn(ASTORE, 4);
        mv.visitVarInsn(ALOAD, 4);
        mv.visitInsn(ARRAYLENGTH);
        mv.visitVarInsn(ISTORE, 5);
        mv.visitInsn(ICONST_0);
        mv.visitVarInsn(ISTORE, 6);
        Label l3 = new Label();
        mv.visitLabel(l3);
        mv.visitFrame(Opcodes.F_FULL, 7, new Object[]{"com/example/studyproject/plugin/annotation/GradeData", "org/json/JSONObject", "java/lang/Class", "[Ljava/lang/reflect/Field;", "[Ljava/lang/reflect/Field;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
        mv.visitVarInsn(ILOAD, 6);
        mv.visitVarInsn(ILOAD, 5);
        Label l4 = new Label();
        mv.visitJumpInsn(IF_ICMPGE, l4);
        mv.visitVarInsn(ALOAD, 4);
        mv.visitVarInsn(ILOAD, 6);
        mv.visitInsn(AALOAD);
        mv.visitVarInsn(ASTORE, 7);
        Label l5 = new Label();
        mv.visitLabel(l5);
        mv.visitLineNumber(62, l5);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitLdcInsn(Type.getType("Lcom/example/studyproject/plugin/annotation/BindData;"));
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "getAnnotation", "(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;", false);
        mv.visitTypeInsn(CHECKCAST, "com/example/studyproject/plugin/annotation/BindData");
        mv.visitVarInsn(ASTORE, 8);
        Label l6 = new Label();
        mv.visitLabel(l6);
        mv.visitLineNumber(63, l6);
        mv.visitVarInsn(ALOAD, 8);
        Label l7 = new Label();
        mv.visitJumpInsn(IFNONNULL, l7);
        Label l8 = new Label();
        mv.visitLabel(l8);
        mv.visitLineNumber(64, l8);
        Label l9 = new Label();
        mv.visitJumpInsn(GOTO, l9);
        mv.visitLabel(l7);
        mv.visitLineNumber(67, l7);
        mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/reflect/Field", "com/example/studyproject/plugin/annotation/BindData"}, 0, null);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "getType", "()Ljava/lang/Class;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        mv.visitVarInsn(ASTORE, 9);
        Label l10 = new Label();
        mv.visitLabel(l10);
        mv.visitLineNumber(68, l10);
        mv.visitVarInsn(ALOAD, 8);
        mv.visitMethodInsn(INVOKEINTERFACE, "com/example/studyproject/plugin/annotation/BindData", "value", "()Ljava/lang/String;", true);
        mv.visitVarInsn(ASTORE, 10);
        Label l11 = new Label();
        mv.visitLabel(l11);
        mv.visitLineNumber(70, l11);
        mv.visitVarInsn(ALOAD, 8);
        mv.visitMethodInsn(INVOKEINTERFACE, "com/example/studyproject/plugin/annotation/BindData", "type", "()Lcom/example/studyproject/plugin/annotation/BindData$EnumType;", true);
        mv.visitFieldInsn(GETSTATIC, "com/example/studyproject/plugin/annotation/BindData$EnumType", "FIELD", "Lcom/example/studyproject/plugin/annotation/BindData$EnumType;");
        Label l12 = new Label();
        mv.visitJumpInsn(IF_ACMPNE, l12);
        Label l13 = new Label();
        mv.visitLabel(l13);
        mv.visitLineNumber(72, l13);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        Label l14 = new Label();
        mv.visitJumpInsn(IFEQ, l14);
        Label l15 = new Label();
        mv.visitLabel(l15);
        mv.visitLineNumber(73, l15);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "org/json/JSONObject", "optString", "(Ljava/lang/String;)Ljava/lang/String;", false);
        mv.visitVarInsn(ASTORE, 11);
        Label l16 = new Label();
        mv.visitLabel(l16);
        mv.visitLineNumber(74, l16);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(ALOAD, 11);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        Label l17 = new Label();
        mv.visitLabel(l17);
        mv.visitLineNumber(75, l17);
        mv.visitJumpInsn(GOTO, l9);
        mv.visitLabel(l14);
        mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/String", "java/lang/String"}, 0, null);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        Label l18 = new Label();
        mv.visitJumpInsn(IFEQ, l18);
        Label l19 = new Label();
        mv.visitLabel(l19);
        mv.visitLineNumber(76, l19);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "org/json/JSONObject", "optInt", "(Ljava/lang/String;)I", false);
        mv.visitVarInsn(ISTORE, 11);
        Label l20 = new Label();
        mv.visitLabel(l20);
        mv.visitLineNumber(77, l20);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(ILOAD, 11);
        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        Label l21 = new Label();
        mv.visitLabel(l21);
        mv.visitLineNumber(78, l21);
        mv.visitJumpInsn(GOTO, l9);
        mv.visitLabel(l18);
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitFieldInsn(GETSTATIC, "java/lang/Long", "TYPE", "Ljava/lang/Class;");
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        Label l22 = new Label();
        mv.visitJumpInsn(IFEQ, l22);
        Label l23 = new Label();
        mv.visitLabel(l23);
        mv.visitLineNumber(79, l23);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "org/json/JSONObject", "optLong", "(Ljava/lang/String;)J", false);
        mv.visitVarInsn(LSTORE, 11);
        Label l24 = new Label();
        mv.visitLabel(l24);
        mv.visitLineNumber(80, l24);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(LLOAD, 11);
        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        Label l25 = new Label();
        mv.visitLabel(l25);
        mv.visitLineNumber(81, l25);
        mv.visitJumpInsn(GOTO, l9);
        mv.visitLabel(l22);
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitFieldInsn(GETSTATIC, "java/lang/Double", "TYPE", "Ljava/lang/Class;");
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        Label l26 = new Label();
        mv.visitJumpInsn(IFEQ, l26);
        Label l27 = new Label();
        mv.visitLabel(l27);
        mv.visitLineNumber(82, l27);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "org/json/JSONObject", "optDouble", "(Ljava/lang/String;)D", false);
        mv.visitVarInsn(DSTORE, 11);
        Label l28 = new Label();
        mv.visitLabel(l28);
        mv.visitLineNumber(83, l28);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(DLOAD, 11);
        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Double", "valueOf", "(D)Ljava/lang/Double;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        Label l29 = new Label();
        mv.visitLabel(l29);
        mv.visitLineNumber(84, l29);
        mv.visitJumpInsn(GOTO, l9);
        mv.visitLabel(l26);
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitFieldInsn(GETSTATIC, "java/lang/Boolean", "TYPE", "Ljava/lang/Class;");
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z", false);
        mv.visitJumpInsn(IFEQ, l9);
        Label l30 = new Label();
        mv.visitLabel(l30);
        mv.visitLineNumber(85, l30);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "org/json/JSONObject", "optBoolean", "(Ljava/lang/String;)Z", false);
        mv.visitVarInsn(ISTORE, 11);
        Label l31 = new Label();
        mv.visitLabel(l31);
        mv.visitLineNumber(86, l31);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(ILOAD, 11);
        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;", false);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        Label l32 = new Label();
        mv.visitLabel(l32);
        mv.visitLineNumber(87, l32);
        mv.visitJumpInsn(GOTO, l9);
        mv.visitLabel(l12);
        mv.visitLineNumber(89, l12);
        mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
        mv.visitVarInsn(ALOAD, 8);
        mv.visitMethodInsn(INVOKEINTERFACE, "com/example/studyproject/plugin/annotation/BindData", "type", "()Lcom/example/studyproject/plugin/annotation/BindData$EnumType;", true);
        mv.visitFieldInsn(GETSTATIC, "com/example/studyproject/plugin/annotation/BindData$EnumType", "OBJECT", "Lcom/example/studyproject/plugin/annotation/BindData$EnumType;");
        mv.visitJumpInsn(IF_ACMPNE, l9);
        Label l33 = new Label();
        mv.visitLabel(l33);
        mv.visitLineNumber(91, l33);
        mv.visitVarInsn(ALOAD, 9);
        mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
        mv.visitVarInsn(ASTORE, 11);
        Label l34 = new Label();
        mv.visitLabel(l34);
        mv.visitLineNumber(92, l34);
        mv.visitVarInsn(ALOAD, 11);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "newInstance", "()Ljava/lang/Object;", false);
        mv.visitVarInsn(ASTORE, 12);
        Label l35 = new Label();
        mv.visitLabel(l35);
        mv.visitLineNumber(94, l35);
        mv.visitVarInsn(ALOAD, 11);
        mv.visitLdcInsn("parseData");
        mv.visitInsn(ICONST_1);
        mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
        mv.visitInsn(DUP);
        mv.visitInsn(ICONST_0);
        mv.visitLdcInsn(Type.getType("Lorg/json/JSONObject;"));
        mv.visitInsn(AASTORE);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
        mv.visitVarInsn(ASTORE, 13);
        Label l36 = new Label();
        mv.visitLabel(l36);
        mv.visitLineNumber(95, l36);
        mv.visitVarInsn(ALOAD, 13);
        mv.visitInsn(ICONST_1);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "setAccessible", "(Z)V", false);
        Label l37 = new Label();
        mv.visitLabel(l37);
        mv.visitLineNumber(96, l37);
        mv.visitVarInsn(ALOAD, 13);
        mv.visitVarInsn(ALOAD, 12);
        mv.visitInsn(ICONST_1);
        mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
        mv.visitInsn(DUP);
        mv.visitInsn(ICONST_0);
        mv.visitVarInsn(ALOAD, 1);
        mv.visitVarInsn(ALOAD, 10);
        mv.visitMethodInsn(INVOKEVIRTUAL, "org/json/JSONObject", "getJSONObject", "(Ljava/lang/String;)Lorg/json/JSONObject;", false);
        mv.visitInsn(AASTORE);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
        mv.visitInsn(POP);
        Label l38 = new Label();
        mv.visitLabel(l38);
        mv.visitLineNumber(98, l38);
        mv.visitVarInsn(ALOAD, 7);
        mv.visitVarInsn(ALOAD, 0);
        mv.visitVarInsn(ALOAD, 12);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "set", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
        mv.visitLabel(l9);
        mv.visitLineNumber(60, l9);
        mv.visitFrame(Opcodes.F_FULL, 7, new Object[]{"com/example/studyproject/plugin/annotation/GradeData", "org/json/JSONObject", "java/lang/Class", "[Ljava/lang/reflect/Field;", "[Ljava/lang/reflect/Field;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
        mv.visitIincInsn(6, 1);
        mv.visitJumpInsn(GOTO, l3);
        mv.visitLabel(l4);
        mv.visitLineNumber(103, l4);
        mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);

        super.visitCode();

    }
}